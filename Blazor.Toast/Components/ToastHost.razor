@namespace ManuHub.Blazor.Toast
@inject IToastService ToastService
@inject ToastOptions ToastOptions

@if(ToastOptions.ToastStyle == ToastStyle.Bootstrap)
{
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

}
else if(ToastOptions.ToastStyle == ToastStyle.Tailwind)
{
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@3.4.1/dist/tailwind.min.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
}

<div class="toast-host @GetPositionClass()">
    @foreach (var toast in Toasts)
    {
        <div class="@GetToastClass(toast)"
             @onmouseenter="() => PauseToast(toast.Id)"
             @onmouseleave="() => ResumeToast(toast.Id)"
             role="alert" aria-live="assertive" aria-atomic="true">
            <div class="message">@toast.Message</div>
            @if(ToastOptions.ShowCloseButton)
            {
                <button class="@GetCloseButtonClass()" @onclick="() => RemoveToast(toast.Id)" aria-label="Close">
                    @if (ToastOptions.ToastStyle != ToastStyle.Bootstrap)
                    {
                        <span>&times;</span>
                    }
                </button>
            }
        </div>
    }
</div>

@code {
    private List<ToastMessage> Toasts = new();
    private Dictionary<Guid, ToastControl> ToastControls = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += RefreshToasts;
    }

    private string GetToastClass(ToastMessage toast)
    {
        var toastStyle = ToastOptions.ToastStyle;

        var levelClass = toastStyle switch
        {
            ToastStyle.Default => GetCustomBgClass(toast.Level),
            ToastStyle.Bootstrap => GetBootstrapBgClass(toast.Level),
            ToastStyle.Tailwind => GetTailwindBgClass(toast.Level),
            _ => ""
        };

        var animationClass = GetFadeClass(toast.Id);
        var baseClass = toastStyle switch
        {
            ToastStyle.Default => "toast-custom",
            ToastStyle.Bootstrap => "toast show mb-2 px-3 py-2 d-flex justify-content-between align-items-center",
            ToastStyle.Tailwind => "toast",
            _ => ""
        };

        return $"{baseClass} {levelClass} {animationClass}";
    }

    private string GetCloseButtonClass()
    {
        return ToastOptions.ToastStyle switch
        {
            ToastStyle.Bootstrap => "btn-close btn-close-white", // Bootstrap class
            ToastStyle.Tailwind => "text-white bg-transparent border-none text-2xl cursor-pointer hover:text-red-300 transition-colors duration-200", // your custom Tailwind class
            ToastStyle.Default => "custom-btn-close", // your custom style
            _ => "btn-close"
        };
    }

    private string GetFadeClass(Guid id)
    {
        // if (ToastControls.TryGetValue(id, out var control))
        //     return control.IsFadingOut ? "toast-fade-out" : "toast-fade-in";
        return "toast-fade-in";
    }

    private string GetCustomBgClass(ToastLevel level) => level switch
    {
        ToastLevel.Success => "toast-custom-success",
        ToastLevel.Error => "toast-custom-error",
        ToastLevel.Warning => "toast-custom-warning",
        ToastLevel.Info => "toast-custom-info",
        _ => "toast-custom-info"
    };

    private string GetBootstrapBgClass(ToastLevel level) => level switch
    {
        ToastLevel.Success => "bg-success text-white",
        ToastLevel.Error => "bg-danger text-white",
        ToastLevel.Warning => "bg-warning text-dark",
        ToastLevel.Info => "bg-info text-white",
        _ => "bg-info text-white"
    };

    private string GetTailwindBgClass(ToastLevel level) => level switch
    {
        ToastLevel.Success => "bg-green-500 text-white p-3 py-2 rounded shadow-md flex justify-between items-center gap-4 transition-transform transform hover:scale-105 hover:shadow-xl",
        ToastLevel.Error => "bg-red-500 text-white p-3 py-2 rounded shadow-md flex justify-between items-center gap-4 transition-transform transform hover:scale-105 hover:shadow-xl",
        ToastLevel.Warning => "bg-yellow-500 text-black p-3 py-2 rounded shadow-md flex justify-between items-center gap-4 transition-transform transform hover:scale-105 hover:shadow-xl",
        ToastLevel.Info => "bg-blue-500 text-white p-3 py-2 rounded shadow-md flex justify-between items-center gap-4 transition-transform transform hover:scale-105 hover:shadow-xl",
        _ => "bg-blue-500 text-white p-3 py-2 rounded shadow-md flex justify-between items-center gap-4 transition-transform transform hover:scale-105 hover:shadow-xl"
    };


    private string GetPositionClass() => ToastService.Position switch
    {
        ToastPosition.TopLeft => "top-left",
        ToastPosition.TopRight => "top-right",
        ToastPosition.TopCenter => "top-center",
        ToastPosition.BottomLeft => "bottom-left",
        ToastPosition.BottomRight => "bottom-right",
        ToastPosition.BottomCenter => "bottom-center",
        _ => "top-right"
    };

    private async void RemoveToast(Guid id)
    {
        var toast = Toasts.FirstOrDefault(t => t.Id == id);
        if (toast != null && ToastControls.TryGetValue(id, out var control))
        {
            control.IsFadingOut = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(300); // Matches fade-out duration
            Toasts.Remove(toast);
            control.TokenSource.Cancel();
            ToastControls.Remove(id);
            await InvokeAsync(StateHasChanged);
            ToastService.TryDispatchNext();
        }
    }

    private void RefreshToasts(ToastMessage dummy)
    {
        while (
            (!ToastService.MaxToasts.HasValue || Toasts.Count < ToastService.MaxToasts.Value)
            && ToastService.TryDequeue(out var toast)
            && toast != null)
        {
            Toasts.Add(toast);
            ToastControls[toast.Id] = new ToastControl
            {
                RemainingTime = toast.Duration,
                LastStartTime = DateTime.UtcNow
            };

            StateHasChanged();
            _ = StartTimerAsync(toast);
        }
    }

    private async Task StartTimerAsync(ToastMessage toast)
    {
        var control = ToastControls[toast.Id];
        try
        {
            await Task.Delay(control.RemainingTime, control.TokenSource.Token);
            RemoveToast(toast.Id);
        }
        catch (TaskCanceledException) { }
    }

    private void PauseToast(Guid toastId)
    {
        if (ToastControls.TryGetValue(toastId, out var control) && !control.IsPaused)
        {
            var elapsed = (int)(DateTime.UtcNow - control.LastStartTime).TotalMilliseconds;
            control.RemainingTime = Math.Max(0, control.RemainingTime - elapsed);
            control.TokenSource.Cancel();
            control.IsPaused = true;
        }
    }

    private void ResumeToast(Guid toastId)
    {
        if (ToastControls.TryGetValue(toastId, out var control) && control.IsPaused)
        {
            control.TokenSource = new CancellationTokenSource();
            control.LastStartTime = DateTime.UtcNow;
            control.IsPaused = false;

            var toast = Toasts.FirstOrDefault(t => t.Id == toastId);
            if (toast != null)
                _ = Task.Run(() => StartTimerAsync(toast));
        }
    }

    private class ToastControl
    {
        public CancellationTokenSource TokenSource { get; set; } = new();
        public int RemainingTime { get; set; }
        public DateTime LastStartTime { get; set; }
        public bool IsPaused { get; set; }
        public bool IsFadingOut { get; set; } = false;
    }
}